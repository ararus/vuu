// Generated from ./src/grammars/Filter.g4 by ANTLR 4.9.0-SNAPSHOT
import { ATNDeserializer } from 'antlr4ts/atn/ATNDeserializer';
import { Lexer } from 'antlr4ts/Lexer';
import { LexerATNSimulator } from 'antlr4ts/atn/LexerATNSimulator';
import { VocabularyImpl } from 'antlr4ts/VocabularyImpl';
import * as Utils from 'antlr4ts/misc/Utils';
export class FilterLexer extends Lexer {
  static TRUE = 1;
  static FALSE = 2;
  static AND = 3;
  static OR = 4;
  static AS = 5;
  static LT = 6;
  static GT = 7;
  static EQ = 8;
  static NEQ = 9;
  static IN = 10;
  static CONTAINS = 11;
  static STARTS = 12;
  static ENDS = 13;
  static PATHSEP = 14;
  static LBRACK = 15;
  static RBRACK = 16;
  static LPAREN = 17;
  static RPAREN = 18;
  static COMMA = 19;
  static COLON = 20;
  static INT = 21;
  static FLOAT = 22;
  static INT_ABBR = 23;
  static FLOAT_ABBR = 24;
  static STRING = 25;
  static ID_STRING = 26;
  static ID_NUMERIC = 27;
  static ID = 28;
  static WS = 29;
  // tslint:disable:no-trailing-whitespace
  static channelNames = ['DEFAULT_TOKEN_CHANNEL', 'HIDDEN'];
  // tslint:disable:no-trailing-whitespace
  static modeNames = ['DEFAULT_MODE'];
  static ruleNames = [
    'TRUE',
    'FALSE',
    'AND',
    'OR',
    'AS',
    'LT',
    'GT',
    'EQ',
    'NEQ',
    'IN',
    'CONTAINS',
    'STARTS',
    'ENDS',
    'PATHSEP',
    'LBRACK',
    'RBRACK',
    'LPAREN',
    'RPAREN',
    'COMMA',
    'COLON',
    'INT',
    'FLOAT',
    'INT_ABBR',
    'FLOAT_ABBR',
    'STRING',
    'ID_STRING',
    'ID_NUMERIC',
    'ID',
    'WS'
  ];
  static _LITERAL_NAMES = [
    undefined,
    "'true'",
    "'false'",
    "'and'",
    "'or'",
    "'as'",
    "'<'",
    "'>'",
    "'='",
    "'!='",
    "'in'",
    "'contains'",
    "'starts'",
    "'ends'",
    "'/'",
    "'['",
    "']'",
    "'('",
    "')'",
    "','",
    "':'"
  ];
  static _SYMBOLIC_NAMES = [
    undefined,
    'TRUE',
    'FALSE',
    'AND',
    'OR',
    'AS',
    'LT',
    'GT',
    'EQ',
    'NEQ',
    'IN',
    'CONTAINS',
    'STARTS',
    'ENDS',
    'PATHSEP',
    'LBRACK',
    'RBRACK',
    'LPAREN',
    'RPAREN',
    'COMMA',
    'COLON',
    'INT',
    'FLOAT',
    'INT_ABBR',
    'FLOAT_ABBR',
    'STRING',
    'ID_STRING',
    'ID_NUMERIC',
    'ID',
    'WS'
  ];
  static VOCABULARY = new VocabularyImpl(
    FilterLexer._LITERAL_NAMES,
    FilterLexer._SYMBOLIC_NAMES,
    []
  );
  // @Override
  // @NotNull
  get vocabulary() {
    return FilterLexer.VOCABULARY;
  }
  // tslint:enable:no-trailing-whitespace
  constructor(input) {
    super(input);
    this._interp = new LexerATNSimulator(FilterLexer._ATN, this);
  }
  // @Override
  get grammarFileName() {
    return 'Filter.g4';
  }
  // @Override
  get ruleNames() {
    return FilterLexer.ruleNames;
  }
  // @Override
  get serializedATN() {
    return FilterLexer._serializedATN;
  }
  // @Override
  get channelNames() {
    return FilterLexer.channelNames;
  }
  // @Override
  get modeNames() {
    return FilterLexer.modeNames;
  }
  static _serializedATN =
    '\x03\uC91D\uCABA\u058D\uAFBA\u4F53\u0607\uEA8B\uC241\x02\x1F\xC7\b\x01' +
    '\x04\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06' +
    '\x04\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f\x04\r' +
    '\t\r\x04\x0E\t\x0E\x04\x0F\t\x0F\x04\x10\t\x10\x04\x11\t\x11\x04\x12\t' +
    '\x12\x04\x13\t\x13\x04\x14\t\x14\x04\x15\t\x15\x04\x16\t\x16\x04\x17\t' +
    '\x17\x04\x18\t\x18\x04\x19\t\x19\x04\x1A\t\x1A\x04\x1B\t\x1B\x04\x1C\t' +
    '\x1C\x04\x1D\t\x1D\x04\x1E\t\x1E\x03\x02\x03\x02\x03\x02\x03\x02\x03\x02' +
    '\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x04\x03\x04\x03\x04' +
    '\x03\x04\x03\x05\x03\x05\x03\x05\x03\x06\x03\x06\x03\x06\x03\x07\x03\x07' +
    '\x03\b\x03\b\x03\t\x03\t\x03\n\x03\n\x03\n\x03\v\x03\v\x03\v\x03\f\x03' +
    '\f\x03\f\x03\f\x03\f\x03\f\x03\f\x03\f\x03\f\x03\r\x03\r\x03\r\x03\r\x03' +
    '\r\x03\r\x03\r\x03\x0E\x03\x0E\x03\x0E\x03\x0E\x03\x0E\x03\x0F\x03\x0F' +
    '\x03\x10\x03\x10\x03\x11\x03\x11\x03\x12\x03\x12\x03\x13\x03\x13\x03\x14' +
    '\x03\x14\x03\x15\x03\x15\x03\x16\x06\x16\x83\n\x16\r\x16\x0E\x16\x84\x03' +
    '\x17\x06\x17\x88\n\x17\r\x17\x0E\x17\x89\x03\x17\x03\x17\x07\x17\x8E\n' +
    '\x17\f\x17\x0E\x17\x91\v\x17\x03\x18\x06\x18\x94\n\x18\r\x18\x0E\x18\x95' +
    '\x03\x18\x03\x18\x03\x19\x06\x19\x9B\n\x19\r\x19\x0E\x19\x9C\x03\x19\x03' +
    '\x19\x06\x19\xA1\n\x19\r\x19\x0E\x19\xA2\x03\x19\x03\x19\x03\x1A\x03\x1A' +
    '\x07\x1A\xA9\n\x1A\f\x1A\x0E\x1A\xAC\v\x1A\x03\x1A\x03\x1A\x03\x1B\x06' +
    '\x1B\xB1\n\x1B\r\x1B\x0E\x1B\xB2\x03\x1C\x06\x1C\xB6\n\x1C\r\x1C\x0E\x1C' +
    '\xB7\x03\x1D\x03\x1D\x07\x1D\xBC\n\x1D\f\x1D\x0E\x1D\xBF\v\x1D\x03\x1E' +
    '\x06\x1E\xC2\n\x1E\r\x1E\x0E\x1E\xC3\x03\x1E\x03\x1E\x02\x02\x02\x1F\x03' +
    '\x02\x03\x05\x02\x04\x07\x02\x05\t\x02\x06\v\x02\x07\r\x02\b\x0F\x02\t' +
    '\x11\x02\n\x13\x02\v\x15\x02\f\x17\x02\r\x19\x02\x0E\x1B\x02\x0F\x1D\x02' +
    "\x10\x1F\x02\x11!\x02\x12#\x02\x13%\x02\x14'\x02\x15)\x02\x16+\x02\x17" +
    '-\x02\x18/\x02\x191\x02\x1A3\x02\x1B5\x02\x1C7\x02\x1D9\x02\x1E;\x02\x1F' +
    '\x03\x02\x07\x06\x02MMOOmmoo\x07\x02""/02;C\\c|\x05\x02C\\aac|\x07\x02' +
    '/02;C\\aac|\x05\x02\v\f\x0F\x0F""\x02\xD1\x02\x03\x03\x02\x02\x02\x02' +
    '\x05\x03\x02\x02\x02\x02\x07\x03\x02\x02\x02\x02\t\x03\x02\x02\x02\x02' +
    '\v\x03\x02\x02\x02\x02\r\x03\x02\x02\x02\x02\x0F\x03\x02\x02\x02\x02\x11' +
    '\x03\x02\x02\x02\x02\x13\x03\x02\x02\x02\x02\x15\x03\x02\x02\x02\x02\x17' +
    '\x03\x02\x02\x02\x02\x19\x03\x02\x02\x02\x02\x1B\x03\x02\x02\x02\x02\x1D' +
    '\x03\x02\x02\x02\x02\x1F\x03\x02\x02\x02\x02!\x03\x02\x02\x02\x02#\x03' +
    "\x02\x02\x02\x02%\x03\x02\x02\x02\x02'\x03\x02\x02\x02\x02)\x03\x02\x02" +
    '\x02\x02+\x03\x02\x02\x02\x02-\x03\x02\x02\x02\x02/\x03\x02\x02\x02\x02' +
    '1\x03\x02\x02\x02\x023\x03\x02\x02\x02\x025\x03\x02\x02\x02\x027\x03\x02' +
    '\x02\x02\x029\x03\x02\x02\x02\x02;\x03\x02\x02\x02\x03=\x03\x02\x02\x02' +
    '\x05B\x03\x02\x02\x02\x07H\x03\x02\x02\x02\tL\x03\x02\x02\x02\vO\x03\x02' +
    '\x02\x02\rR\x03\x02\x02\x02\x0FT\x03\x02\x02\x02\x11V\x03\x02\x02\x02' +
    '\x13X\x03\x02\x02\x02\x15[\x03\x02\x02\x02\x17^\x03\x02\x02\x02\x19g\x03' +
    '\x02\x02\x02\x1Bn\x03\x02\x02\x02\x1Ds\x03\x02\x02\x02\x1Fu\x03\x02\x02' +
    "\x02!w\x03\x02\x02\x02#y\x03\x02\x02\x02%{\x03\x02\x02\x02'}\x03\x02" +
    '\x02\x02)\x7F\x03\x02\x02\x02+\x82\x03\x02\x02\x02-\x87\x03\x02\x02\x02' +
    '/\x93\x03\x02\x02\x021\x9A\x03\x02\x02\x023\xA6\x03\x02\x02\x025\xB0\x03' +
    '\x02\x02\x027\xB5\x03\x02\x02\x029\xB9\x03\x02\x02\x02;\xC1\x03\x02\x02' +
    '\x02=>\x07v\x02\x02>?\x07t\x02\x02?@\x07w\x02\x02@A\x07g\x02\x02A\x04' +
    '\x03\x02\x02\x02BC\x07h\x02\x02CD\x07c\x02\x02DE\x07n\x02\x02EF\x07u\x02' +
    '\x02FG\x07g\x02\x02G\x06\x03\x02\x02\x02HI\x07c\x02\x02IJ\x07p\x02\x02' +
    'JK\x07f\x02\x02K\b\x03\x02\x02\x02LM\x07q\x02\x02MN\x07t\x02\x02N\n\x03' +
    '\x02\x02\x02OP\x07c\x02\x02PQ\x07u\x02\x02Q\f\x03\x02\x02\x02RS\x07>\x02' +
    '\x02S\x0E\x03\x02\x02\x02TU\x07@\x02\x02U\x10\x03\x02\x02\x02VW\x07?\x02' +
    '\x02W\x12\x03\x02\x02\x02XY\x07#\x02\x02YZ\x07?\x02\x02Z\x14\x03\x02\x02' +
    '\x02[\\\x07k\x02\x02\\]\x07p\x02\x02]\x16\x03\x02\x02\x02^_\x07e\x02\x02' +
    '_`\x07q\x02\x02`a\x07p\x02\x02ab\x07v\x02\x02bc\x07c\x02\x02cd\x07k\x02' +
    '\x02de\x07p\x02\x02ef\x07u\x02\x02f\x18\x03\x02\x02\x02gh\x07u\x02\x02' +
    'hi\x07v\x02\x02ij\x07c\x02\x02jk\x07t\x02\x02kl\x07v\x02\x02lm\x07u\x02' +
    '\x02m\x1A\x03\x02\x02\x02no\x07g\x02\x02op\x07p\x02\x02pq\x07f\x02\x02' +
    'qr\x07u\x02\x02r\x1C\x03\x02\x02\x02st\x071\x02\x02t\x1E\x03\x02\x02\x02' +
    'uv\x07]\x02\x02v \x03\x02\x02\x02wx\x07_\x02\x02x"\x03\x02\x02\x02yz' +
    '\x07*\x02\x02z$\x03\x02\x02\x02{|\x07+\x02\x02|&\x03\x02\x02\x02}~\x07' +
    '.\x02\x02~(\x03\x02\x02\x02\x7F\x80\x07<\x02\x02\x80*\x03\x02\x02\x02' +
    '\x81\x83\x042;\x02\x82\x81\x03\x02\x02\x02\x83\x84\x03\x02\x02\x02\x84' +
    '\x82\x03\x02\x02\x02\x84\x85\x03\x02\x02\x02\x85,\x03\x02\x02\x02\x86' +
    '\x88\x042;\x02\x87\x86\x03\x02\x02\x02\x88\x89\x03\x02\x02\x02\x89\x87' +
    '\x03\x02\x02\x02\x89\x8A\x03\x02\x02\x02\x8A\x8B\x03\x02\x02\x02\x8B\x8F' +
    '\x070\x02\x02\x8C\x8E\x042;\x02\x8D\x8C\x03\x02\x02\x02\x8E\x91\x03\x02' +
    '\x02\x02\x8F\x8D\x03\x02\x02\x02\x8F\x90\x03\x02\x02\x02\x90.\x03\x02' +
    '\x02\x02\x91\x8F\x03\x02\x02\x02\x92\x94\x043;\x02\x93\x92\x03\x02\x02' +
    '\x02\x94\x95\x03\x02\x02\x02\x95\x93\x03\x02\x02\x02\x95\x96\x03\x02\x02' +
    '\x02\x96\x97\x03\x02\x02\x02\x97\x98\t\x02\x02\x02\x980\x03\x02\x02\x02' +
    '\x99\x9B\x042;\x02\x9A\x99\x03\x02\x02\x02\x9B\x9C\x03\x02\x02\x02\x9C' +
    '\x9A\x03\x02\x02\x02\x9C\x9D\x03\x02\x02\x02\x9D\x9E\x03\x02\x02\x02\x9E' +
    '\xA0\x070\x02\x02\x9F\xA1\x042;\x02\xA0\x9F\x03\x02\x02\x02\xA1\xA2\x03' +
    '\x02\x02\x02\xA2\xA0\x03\x02\x02\x02\xA2\xA3\x03\x02\x02\x02\xA3\xA4\x03' +
    '\x02\x02\x02\xA4\xA5\t\x02\x02\x02\xA52\x03\x02\x02\x02\xA6\xAA\x07$\x02' +
    '\x02\xA7\xA9\t\x03\x02\x02\xA8\xA7\x03\x02\x02\x02\xA9\xAC\x03\x02\x02' +
    '\x02\xAA\xA8\x03\x02\x02\x02\xAA\xAB\x03\x02\x02\x02\xAB\xAD\x03\x02\x02' +
    '\x02\xAC\xAA\x03\x02\x02\x02\xAD\xAE\x07$\x02\x02\xAE4\x03\x02\x02\x02' +
    '\xAF\xB1\x07u\x02\x02\xB0\xAF\x03\x02\x02\x02\xB1\xB2\x03\x02\x02\x02' +
    '\xB2\xB0\x03\x02\x02\x02\xB2\xB3\x03\x02\x02\x02\xB36\x03\x02\x02\x02' +
    '\xB4\xB6\x07p\x02\x02\xB5\xB4\x03\x02\x02\x02\xB6\xB7\x03\x02\x02\x02' +
    '\xB7\xB5\x03\x02\x02\x02\xB7\xB8\x03\x02\x02\x02\xB88\x03\x02\x02\x02' +
    '\xB9\xBD\t\x04\x02\x02\xBA\xBC\t\x05\x02\x02\xBB\xBA\x03\x02\x02\x02\xBC' +
    '\xBF\x03\x02\x02\x02\xBD\xBB\x03\x02\x02\x02\xBD\xBE\x03\x02\x02\x02\xBE' +
    ':\x03\x02\x02\x02\xBF\xBD\x03\x02\x02\x02\xC0\xC2\t\x06\x02\x02\xC1\xC0' +
    '\x03\x02\x02\x02\xC2\xC3\x03\x02\x02\x02\xC3\xC1\x03\x02\x02\x02\xC3\xC4' +
    '\x03\x02\x02\x02\xC4\xC5\x03\x02\x02\x02\xC5\xC6\b\x1E\x02\x02\xC6<\x03' +
    '\x02\x02\x02\x0E\x02\x84\x89\x8F\x95\x9C\xA2\xAA\xB2\xB7\xBD\xC3\x03\b' +
    '\x02\x02';
  static __ATN;
  static get _ATN() {
    if (!FilterLexer.__ATN) {
      FilterLexer.__ATN = new ATNDeserializer().deserialize(
        Utils.toCharArray(FilterLexer._serializedATN)
      );
    }
    return FilterLexer.__ATN;
  }
}
